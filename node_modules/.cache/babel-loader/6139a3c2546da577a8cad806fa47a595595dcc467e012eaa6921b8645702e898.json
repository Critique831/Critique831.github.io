{"ast":null,"code":"import{useState,useEffect}from'react';import'./gameL5.css';import SingleCard from'../components/SingleCard';import{updateLeaderboard}from'../leaderboardUtils';import LevelCompletePopup from'../Intermediate';import'../Intermediate.css';import{useNavigate}from\"react-router-dom\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const cardImages=[{\"src\":\"img/css.png\",matched:false},{\"src\":\"img/google.png\",matched:false},{\"src\":\"img/html.png\",matched:false},{\"src\":\"img/js.png\",matched:false},{\"src\":\"img/c++.png\",matched:false},{\"src\":\"img/react.png\",matched:false},{\"src\":\"img/aws.png\",matched:false},{\"src\":\"img/win11.png\",matched:false}];function StandardGameL5(){const[showPopup,setShowPopup]=useState(false);console.log('Rendering StandardGame component');const navigate=useNavigate();const[cards,setCards]=useState([]);const[turns,setTurns]=useState(0);const[card1,setCard1]=useState(null);const[card2,setCard2]=useState(null);const[finished,setFinished]=useState(false);const[disabled,setDisabled]=useState(false);useEffect(()=>{shuffle();},[]);useEffect(()=>{if(card1&&card2){setDisabled(true);if(card1.src===card2.src){setCards(prev=>{return prev.map(card=>{if(card.src===card1.src){return{...card,matched:true};}else{return card;}});});resetTurn();}else{setTimeout(()=>resetTurn(),1000);}}},[card1,card2]);useEffect(()=>{if(cards.length!==0){let flag=0;cards.forEach(card=>{if(card.matched){flag+=1;}});if(flag===cards.length){setFinished(true);}else{setFinished(false);}}},[cards]);useEffect(()=>{if(finished){console.log(\"Congratulations!!!!!\");}},[finished]);//shuffle\nconst shuffle=()=>{const shuffledCards=[...cardImages,...cardImages].sort(()=>Math.random()-0.5).map(card=>({...card,id:Math.random()}));setCard1(null);setCard2(null);setCards(shuffledCards);setTurns(0);setFinished(false);};const handleChoice=card=>{if(card1!==null){card1.id===card.id?console.log(\"Multiple clicks\"):setCard2(card);}else{setCard1(card);}};const resetTurn=()=>{setCard1(null);setCard2(null);setTurns(prev=>prev+1);setDisabled(false);};//Storing good marks to leaderboard\nuseEffect(()=>{if(finished){const level=5;updateLeaderboard(level,turns);}},[finished,turns]);useEffect(()=>{if(finished){// Show the level completion popup\nsetShowPopup(true);}},[finished]);// const handleProceed = () => {\n//     // Logic to proceed to the next level\n//     // Update the level, reset game state, etc.\n//     setShowPopup(false); // Hide the popup\n// };\nconst handleRestart=()=>{// Logic to restart the current level...\nshuffle();// Reshuffle cards for the current level\nsetTurns(0);// Reset turns to zero\nsetFinished(false);// Reset finished state\nsetShowPopup(false);// Hide the popup\n};const handleHome=()=>{navigate('/');setShowPopup(false);// Hide the popup\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Memory Game\"}),/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsx(\"button\",{className:\"menu\",onClick:shuffle,children:\"New Game\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"card-gridL5\",children:cards.map(card=>/*#__PURE__*/_jsx(SingleCard,{card:card,handleChoice:handleChoice,flipped:card===card1||card===card2||card.matched,disabled:disabled},card.id))}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Turns: \",turns]}),showPopup&&/*#__PURE__*/_jsx(LevelCompletePopup,{onProceed:null,onRestart:handleRestart,onHome:handleHome})]});}export default StandardGameL5;","map":{"version":3,"names":["useState","useEffect","SingleCard","updateLeaderboard","LevelCompletePopup","useNavigate","jsx","_jsx","jsxs","_jsxs","cardImages","matched","StandardGameL5","showPopup","setShowPopup","console","log","navigate","cards","setCards","turns","setTurns","card1","setCard1","card2","setCard2","finished","setFinished","disabled","setDisabled","shuffle","src","prev","map","card","resetTurn","setTimeout","length","flag","forEach","shuffledCards","sort","Math","random","id","handleChoice","level","handleRestart","handleHome","className","children","onClick","flipped","onProceed","onRestart","onHome"],"sources":["C:/Users/Asus/Desktop/School/TNP/react-memorygame/src/standard/gameL5.js"],"sourcesContent":["import {useState,useEffect} from 'react';\r\nimport './gameL5.css';\r\nimport SingleCard from '../components/SingleCard';\r\nimport { updateLeaderboard } from '../leaderboardUtils';\r\nimport LevelCompletePopup from '../Intermediate';\r\nimport '../Intermediate.css';\r\nimport {useNavigate } from \"react-router-dom\";\r\n\r\nconst cardImages = [\r\n    {\"src\": \"img/css.png\", matched: false},\r\n    {\"src\": \"img/google.png\", matched: false},\r\n    {\"src\": \"img/html.png\", matched: false},\r\n    {\"src\": \"img/js.png\", matched: false},\r\n    {\"src\": \"img/c++.png\", matched: false},\r\n    {\"src\": \"img/react.png\", matched: false},\r\n    {\"src\": \"img/aws.png\", matched: false},\r\n    {\"src\": \"img/win11.png\", matched: false},\r\n]\r\n\r\nfunction StandardGameL5() {\r\n    const [showPopup, setShowPopup] = useState(false);\r\n    console.log('Rendering StandardGame component');\r\n    const navigate = useNavigate();\r\n    const [cards, setCards] = useState([]);\r\n    const [turns, setTurns] = useState(0);\r\n    const [card1, setCard1] = useState(null);\r\n    const [card2, setCard2] = useState(null);\r\n    const [finished, setFinished] = useState(false);\r\n    const [disabled,setDisabled] = useState(false);\r\n    \r\n    useEffect (() => {\r\n        shuffle();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (card1 && card2) {\r\n            setDisabled(true)\r\n            if(card1.src === card2.src){\r\n                setCards(prev => {\r\n                    return prev.map(card => {\r\n                        if(card.src === card1.src){\r\n                            return {...card, matched: true}\r\n                        }else{\r\n                            return card\r\n                        }\r\n                    })\r\n                })\r\n                resetTurn()\r\n            }else{\r\n                setTimeout(() => resetTurn(), 1000)\r\n            }\r\n        }\r\n    },[card1, card2])\r\n\r\n    useEffect(() => {\r\n        if(cards.length !== 0){\r\n            let flag = 0;\r\n            cards.forEach((card) => {\r\n                if (card.matched) {\r\n                    flag += 1 \r\n                } \r\n            });\r\n            if(flag === cards.length){\r\n                setFinished(true)\r\n            }else{\r\n                setFinished(false)\r\n            }\r\n        }\r\n    }, [cards]);\r\n\r\n    useEffect(() => {\r\n        if(finished){\r\n            console.log(\"Congratulations!!!!!\")\r\n        }\r\n    },[finished])\r\n\r\n    //shuffle\r\n    const shuffle = () => {\r\n        const shuffledCards = [...cardImages, ...cardImages]\r\n        .sort(() => Math.random() - 0.5)\r\n        .map((card) => ({...card, id: Math.random()}))\r\n\r\n        setCard1(null)\r\n        setCard2(null)\r\n        setCards(shuffledCards)\r\n        setTurns(0)\r\n        setFinished(false)\r\n    }\r\n\r\n    const handleChoice = (card) => {\r\n        if(card1 !== null) {\r\n            card1.id === card.id ? console.log(\"Multiple clicks\") :setCard2(card)\r\n        } else {\r\n            setCard1(card)\r\n        }\r\n    }\r\n\r\n    const resetTurn = () =>{\r\n        setCard1(null)\r\n        setCard2(null)\r\n        setTurns(prev => prev + 1)\r\n        setDisabled(false)\r\n    }\r\n\r\n    //Storing good marks to leaderboard\r\n    useEffect(() => {\r\n        if (finished) {\r\n          const level = 5;\r\n          updateLeaderboard(level, turns);\r\n        }\r\n    }, [finished, turns]);\r\n\r\n    useEffect(() => {\r\n        if (finished) {\r\n          // Show the level completion popup\r\n          setShowPopup(true);\r\n        }\r\n    }, [finished]);\r\n\r\n    // const handleProceed = () => {\r\n    //     // Logic to proceed to the next level\r\n    //     // Update the level, reset game state, etc.\r\n    //     setShowPopup(false); // Hide the popup\r\n    // };\r\n\r\n    const handleRestart = () => {\r\n        // Logic to restart the current level...\r\n        shuffle(); // Reshuffle cards for the current level\r\n        setTurns(0); // Reset turns to zero\r\n        setFinished(false); // Reset finished state\r\n        setShowPopup(false); // Hide the popup\r\n    }\r\n\r\n    const handleHome = () => {\r\n        navigate('/');\r\n        setShowPopup(false); // Hide the popup\r\n    };\r\n\r\n    return(\r\n        <div className='App'>\r\n            <h1>Memory Game</h1>\r\n            <p>\r\n                <button className='menu' onClick={shuffle}>New Game</button>\r\n            </p>\r\n            <div className='card-gridL5'>\r\n                {cards.map(card => (\r\n                    <SingleCard key={card.id} card={card} handleChoice={handleChoice} flipped={card===card1||card===card2||card.matched} disabled={disabled}/>\r\n                ))}\r\n            </div>\r\n            <p>Turns: {turns}</p>\r\n\r\n            {showPopup && (\r\n                <LevelCompletePopup\r\n                onProceed={null}\r\n                onRestart={handleRestart}\r\n                onHome={handleHome}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StandardGameL5;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}