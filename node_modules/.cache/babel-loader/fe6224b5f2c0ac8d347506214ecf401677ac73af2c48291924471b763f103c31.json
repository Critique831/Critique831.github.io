{"ast":null,"code":"// leaderboardUtils.js\n\nexport function updateLeaderboard(level, steps) {\n  // Get current leaderboard data from local storage\n  const storedLeaderboard = JSON.parse(localStorage.getItem('leaderboard')) || [];\n\n  // Find the existing entry for the current level\n  const existingEntryIndex = storedLeaderboard.findIndex(entry => entry.level === level);\n\n  // If an existing entry is found and the new steps are shorter, update the entry\n  if (existingEntryIndex !== -1 && steps < storedLeaderboard[existingEntryIndex].steps) {\n    const updatedLeaderboard = [...storedLeaderboard]; // Create a copy of the current leaderboard\n\n    // Update the steps for the existing entry\n    updatedLeaderboard[existingEntryIndex] = {\n      level,\n      steps\n    };\n\n    // Save the updated leaderboard to local storage\n    localStorage.setItem('leaderboard', JSON.stringify(updatedLeaderboard));\n  }\n  // If no existing entry or the new steps are shorter, add a new entry\n  else if (existingEntryIndex === -1) {\n    const updatedLeaderboard = [...storedLeaderboard.filter(entry => entry.level !== level),\n    // Remove existing entries for the current level\n    {\n      level,\n      steps\n    } // Add the new entry\n    ];\n\n    // Save the updated leaderboard to local storage\n    localStorage.setItem('leaderboard', JSON.stringify(updatedLeaderboard));\n  }\n}","map":{"version":3,"names":["updateLeaderboard","level","steps","storedLeaderboard","JSON","parse","localStorage","getItem","existingEntryIndex","findIndex","entry","updatedLeaderboard","setItem","stringify","filter"],"sources":["C:/Users/Asus/Desktop/School/TNP/memorygame/src/leaderboardUtils.js"],"sourcesContent":["// leaderboardUtils.js\r\n\r\nexport function updateLeaderboard(level, steps) {\r\n    // Get current leaderboard data from local storage\r\n    const storedLeaderboard = JSON.parse(localStorage.getItem('leaderboard')) || [];\r\n  \r\n    // Find the existing entry for the current level\r\n    const existingEntryIndex = storedLeaderboard.findIndex((entry) => entry.level === level);\r\n  \r\n    // If an existing entry is found and the new steps are shorter, update the entry\r\n    if (existingEntryIndex !== -1 && steps < storedLeaderboard[existingEntryIndex].steps) {\r\n      const updatedLeaderboard = [...storedLeaderboard]; // Create a copy of the current leaderboard\r\n  \r\n      // Update the steps for the existing entry\r\n      updatedLeaderboard[existingEntryIndex] = { level, steps };\r\n  \r\n      // Save the updated leaderboard to local storage\r\n      localStorage.setItem('leaderboard', JSON.stringify(updatedLeaderboard));\r\n    }\r\n    // If no existing entry or the new steps are shorter, add a new entry\r\n    else if (existingEntryIndex === -1) {\r\n      const updatedLeaderboard = [\r\n        ...storedLeaderboard.filter((entry) => entry.level !== level), // Remove existing entries for the current level\r\n        { level, steps }, // Add the new entry\r\n      ];\r\n  \r\n      // Save the updated leaderboard to local storage\r\n      localStorage.setItem('leaderboard', JSON.stringify(updatedLeaderboard));\r\n    }\r\n  }\r\n  "],"mappings":"AAAA;;AAEA,OAAO,SAASA,iBAAiBA,CAACC,KAAK,EAAEC,KAAK,EAAE;EAC5C;EACA,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,EAAE;;EAE/E;EACA,MAAMC,kBAAkB,GAAGL,iBAAiB,CAACM,SAAS,CAAEC,KAAK,IAAKA,KAAK,CAACT,KAAK,KAAKA,KAAK,CAAC;;EAExF;EACA,IAAIO,kBAAkB,KAAK,CAAC,CAAC,IAAIN,KAAK,GAAGC,iBAAiB,CAACK,kBAAkB,CAAC,CAACN,KAAK,EAAE;IACpF,MAAMS,kBAAkB,GAAG,CAAC,GAAGR,iBAAiB,CAAC,CAAC,CAAC;;IAEnD;IACAQ,kBAAkB,CAACH,kBAAkB,CAAC,GAAG;MAAEP,KAAK;MAAEC;IAAM,CAAC;;IAEzD;IACAI,YAAY,CAACM,OAAO,CAAC,aAAa,EAAER,IAAI,CAACS,SAAS,CAACF,kBAAkB,CAAC,CAAC;EACzE;EACA;EAAA,KACK,IAAIH,kBAAkB,KAAK,CAAC,CAAC,EAAE;IAClC,MAAMG,kBAAkB,GAAG,CACzB,GAAGR,iBAAiB,CAACW,MAAM,CAAEJ,KAAK,IAAKA,KAAK,CAACT,KAAK,KAAKA,KAAK,CAAC;IAAE;IAC/D;MAAEA,KAAK;MAAEC;IAAM,CAAC,CAAE;IAAA,CACnB;;IAED;IACAI,YAAY,CAACM,OAAO,CAAC,aAAa,EAAER,IAAI,CAACS,SAAS,CAACF,kBAAkB,CAAC,CAAC;EACzE;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}